import 'package:flutter/material.dart';
import 'package:recommendation_app/model/music.dart';
import 'package:recommendation_app/services/music_service.dart';

class AddMusicScreen extends StatefulWidget {
  final int userId;

  const AddMusicScreen({required this.userId, Key? key}) : super(key: key);

  @override
  _AddMusicScreenState createState() => _AddMusicScreenState();
}

class _AddMusicScreenState extends State<AddMusicScreen> {
  final _formKey = GlobalKey<FormState>();
  final _musicService = MusicService();
  final _music = Music(
    id: 0,
    title: '',
    artist: '',
    genre: 'pop',
    mood: 'happy',
    url: '',
    userId: widget.userId, // Pass the user ID to the music

  );

  final List<String> _genres = ['pop', 'rock', 'jazz', 'classical', 'hiphop'];
  final List<String> _moods = ['happy', 'sad', 'energetic', 'calm', 'romantic'];

  Future<void> _pickAudio() async {
    // Implémentez la sélection de fichier ici
    // Exemple avec file_picker:
    // final result = await FilePicker.platform.pickFiles(type: FileType.audio);
    // if (result != null) {
    //   setState(() {
    //     _music.url = result.files.single.path!;
    //   });
    // }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Ajouter une musique'),
        backgroundColor: Color(0xFF328E6E),
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Titre',
                  labelStyle: TextStyle(color: Color(0xFF328E6E)),
                validator: (value) => value!.isEmpty ? 'Requis' : null,
                onSaved: (value) => _music.title = value!,
              ),
              SizedBox(height: 16),
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Artiste',
                  labelStyle: TextStyle(color: Color(0xFF328E6E)),
                validator: (value) => value!.isEmpty ? 'Requis' : null,
                onSaved: (value) => _music.artist = value!,
              ),
              SizedBox(height: 16),
              DropdownButtonFormField<String>(
                value: _music.genre,
                decoration: InputDecoration(
                  labelText: 'Genre',
                  labelStyle: TextStyle(color: Color(0xFF328E6E)),
                dropdownColor: Color(0xFFE1EEBC),
                items: _genres.map((genre) {
                  return DropdownMenuItem(
                    value: genre,
                    child: Text(genre[0].toUpperCase() + genre.substring(1)),
                  );
                }).toList(),
                onChanged: (value) => _music.genre = value!,
              ),
              SizedBox(height: 16),
              DropdownButtonFormField<String>(
                value: _music.mood,
                decoration: InputDecoration(
                  labelText: 'Humeur',
                  labelStyle: TextStyle(color: Color(0xFF328E6E)),
                dropdownColor: Color(0xFFE1EEBC),
                items: _moods.map((mood) {
                  return DropdownMenuItem(
                    value: mood,
                    child: Text(mood[0].toUpperCase() + mood.substring(1)),
                  );
                }).toList(),
                onChanged: (value) => _music.mood = value!,
              ),
              SizedBox(height: 20),
              ElevatedButton(
                style: ElevatedButton.styleFrom(
                  primary: Color(0xFF67AE6E),
                  padding: EdgeInsets.symmetric(horizontal: 30, vertical: 15),
                ),
                onPressed: _pickAudio,
                child: Text('Sélectionner le fichier audio'),
              ),
              SizedBox(height: 30),
              ElevatedButton(
                style: ElevatedButton.styleFrom(
                  primary: Color(0xFF328E6E),
                  padding: EdgeInsets.symmetric(horizontal: 50, vertical: 15),
                ),
                onPressed: () async {
                  if (_formKey.currentState!.validate()) {
                    _formKey.currentState!.save();
                    await _musicService.addMusicToLibrary(_music);
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text('Musique ajoutée avec succès!')),
                    );
                    Navigator.pop(context);
                  }
                },
                child: Text('Enregistrer'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}